// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kk_schedule/service.proto

package kk_schedule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KKSchedule_JobList_FullMethodName       = "/kk_schedule.KKSchedule/JobList"
	KKSchedule_JobGet_FullMethodName        = "/kk_schedule.KKSchedule/JobGet"
	KKSchedule_JobSetSpec_FullMethodName    = "/kk_schedule.KKSchedule/JobSetSpec"
	KKSchedule_JobEnable_FullMethodName     = "/kk_schedule.KKSchedule/JobEnable"
	KKSchedule_JobDisable_FullMethodName    = "/kk_schedule.KKSchedule/JobDisable"
	KKSchedule_JobPut_FullMethodName        = "/kk_schedule.KKSchedule/JobPut"
	KKSchedule_JobDelete_FullMethodName     = "/kk_schedule.KKSchedule/JobDelete"
	KKSchedule_ServiceList_FullMethodName   = "/kk_schedule.KKSchedule/ServiceList"
	KKSchedule_ServicePut_FullMethodName    = "/kk_schedule.KKSchedule/ServicePut"
	KKSchedule_ServiceGet_FullMethodName    = "/kk_schedule.KKSchedule/ServiceGet"
	KKSchedule_ServiceDelete_FullMethodName = "/kk_schedule.KKSchedule/ServiceDelete"
)

// KKScheduleClient is the client API for KKSchedule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KKScheduleClient interface {
	JobList(ctx context.Context, in *JobList_Input, opts ...grpc.CallOption) (*JobList_Output, error)
	JobGet(ctx context.Context, in *JobGet_Input, opts ...grpc.CallOption) (*JobGet_Output, error)
	JobSetSpec(ctx context.Context, in *JobSetSpec_Input, opts ...grpc.CallOption) (*JobSetSpec_Output, error)
	JobEnable(ctx context.Context, in *JobEnable_Input, opts ...grpc.CallOption) (*JobEnable_Output, error)
	JobDisable(ctx context.Context, in *JobDisable_Input, opts ...grpc.CallOption) (*JobDisable_Output, error)
	JobPut(ctx context.Context, in *JobPut_Input, opts ...grpc.CallOption) (*JobPut_Output, error)
	JobDelete(ctx context.Context, in *JobDelete_Input, opts ...grpc.CallOption) (*JobDelete_Output, error)
	ServiceList(ctx context.Context, in *ServiceList_Input, opts ...grpc.CallOption) (*ServiceList_Output, error)
	ServicePut(ctx context.Context, in *ServicePut_Input, opts ...grpc.CallOption) (*ServicePut_Output, error)
	ServiceGet(ctx context.Context, in *ServiceGet_Input, opts ...grpc.CallOption) (*ServiceGet_Output, error)
	ServiceDelete(ctx context.Context, in *ServiceDelete_Input, opts ...grpc.CallOption) (*ServiceDelete_Output, error)
}

type kKScheduleClient struct {
	cc grpc.ClientConnInterface
}

func NewKKScheduleClient(cc grpc.ClientConnInterface) KKScheduleClient {
	return &kKScheduleClient{cc}
}

func (c *kKScheduleClient) JobList(ctx context.Context, in *JobList_Input, opts ...grpc.CallOption) (*JobList_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobList_Output)
	err := c.cc.Invoke(ctx, KKSchedule_JobList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) JobGet(ctx context.Context, in *JobGet_Input, opts ...grpc.CallOption) (*JobGet_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobGet_Output)
	err := c.cc.Invoke(ctx, KKSchedule_JobGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) JobSetSpec(ctx context.Context, in *JobSetSpec_Input, opts ...grpc.CallOption) (*JobSetSpec_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSetSpec_Output)
	err := c.cc.Invoke(ctx, KKSchedule_JobSetSpec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) JobEnable(ctx context.Context, in *JobEnable_Input, opts ...grpc.CallOption) (*JobEnable_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobEnable_Output)
	err := c.cc.Invoke(ctx, KKSchedule_JobEnable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) JobDisable(ctx context.Context, in *JobDisable_Input, opts ...grpc.CallOption) (*JobDisable_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobDisable_Output)
	err := c.cc.Invoke(ctx, KKSchedule_JobDisable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) JobPut(ctx context.Context, in *JobPut_Input, opts ...grpc.CallOption) (*JobPut_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobPut_Output)
	err := c.cc.Invoke(ctx, KKSchedule_JobPut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) JobDelete(ctx context.Context, in *JobDelete_Input, opts ...grpc.CallOption) (*JobDelete_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobDelete_Output)
	err := c.cc.Invoke(ctx, KKSchedule_JobDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) ServiceList(ctx context.Context, in *ServiceList_Input, opts ...grpc.CallOption) (*ServiceList_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceList_Output)
	err := c.cc.Invoke(ctx, KKSchedule_ServiceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) ServicePut(ctx context.Context, in *ServicePut_Input, opts ...grpc.CallOption) (*ServicePut_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServicePut_Output)
	err := c.cc.Invoke(ctx, KKSchedule_ServicePut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) ServiceGet(ctx context.Context, in *ServiceGet_Input, opts ...grpc.CallOption) (*ServiceGet_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceGet_Output)
	err := c.cc.Invoke(ctx, KKSchedule_ServiceGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kKScheduleClient) ServiceDelete(ctx context.Context, in *ServiceDelete_Input, opts ...grpc.CallOption) (*ServiceDelete_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceDelete_Output)
	err := c.cc.Invoke(ctx, KKSchedule_ServiceDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KKScheduleServer is the server API for KKSchedule service.
// All implementations must embed UnimplementedKKScheduleServer
// for forward compatibility.
type KKScheduleServer interface {
	JobList(context.Context, *JobList_Input) (*JobList_Output, error)
	JobGet(context.Context, *JobGet_Input) (*JobGet_Output, error)
	JobSetSpec(context.Context, *JobSetSpec_Input) (*JobSetSpec_Output, error)
	JobEnable(context.Context, *JobEnable_Input) (*JobEnable_Output, error)
	JobDisable(context.Context, *JobDisable_Input) (*JobDisable_Output, error)
	JobPut(context.Context, *JobPut_Input) (*JobPut_Output, error)
	JobDelete(context.Context, *JobDelete_Input) (*JobDelete_Output, error)
	ServiceList(context.Context, *ServiceList_Input) (*ServiceList_Output, error)
	ServicePut(context.Context, *ServicePut_Input) (*ServicePut_Output, error)
	ServiceGet(context.Context, *ServiceGet_Input) (*ServiceGet_Output, error)
	ServiceDelete(context.Context, *ServiceDelete_Input) (*ServiceDelete_Output, error)
	mustEmbedUnimplementedKKScheduleServer()
}

// UnimplementedKKScheduleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKKScheduleServer struct{}

func (UnimplementedKKScheduleServer) JobList(context.Context, *JobList_Input) (*JobList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobList not implemented")
}
func (UnimplementedKKScheduleServer) JobGet(context.Context, *JobGet_Input) (*JobGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobGet not implemented")
}
func (UnimplementedKKScheduleServer) JobSetSpec(context.Context, *JobSetSpec_Input) (*JobSetSpec_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSetSpec not implemented")
}
func (UnimplementedKKScheduleServer) JobEnable(context.Context, *JobEnable_Input) (*JobEnable_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobEnable not implemented")
}
func (UnimplementedKKScheduleServer) JobDisable(context.Context, *JobDisable_Input) (*JobDisable_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobDisable not implemented")
}
func (UnimplementedKKScheduleServer) JobPut(context.Context, *JobPut_Input) (*JobPut_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobPut not implemented")
}
func (UnimplementedKKScheduleServer) JobDelete(context.Context, *JobDelete_Input) (*JobDelete_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobDelete not implemented")
}
func (UnimplementedKKScheduleServer) ServiceList(context.Context, *ServiceList_Input) (*ServiceList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceList not implemented")
}
func (UnimplementedKKScheduleServer) ServicePut(context.Context, *ServicePut_Input) (*ServicePut_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServicePut not implemented")
}
func (UnimplementedKKScheduleServer) ServiceGet(context.Context, *ServiceGet_Input) (*ServiceGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceGet not implemented")
}
func (UnimplementedKKScheduleServer) ServiceDelete(context.Context, *ServiceDelete_Input) (*ServiceDelete_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelete not implemented")
}
func (UnimplementedKKScheduleServer) mustEmbedUnimplementedKKScheduleServer() {}
func (UnimplementedKKScheduleServer) testEmbeddedByValue()                    {}

// UnsafeKKScheduleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KKScheduleServer will
// result in compilation errors.
type UnsafeKKScheduleServer interface {
	mustEmbedUnimplementedKKScheduleServer()
}

func RegisterKKScheduleServer(s grpc.ServiceRegistrar, srv KKScheduleServer) {
	// If the following call pancis, it indicates UnimplementedKKScheduleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KKSchedule_ServiceDesc, srv)
}

func _KKSchedule_JobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).JobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_JobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).JobList(ctx, req.(*JobList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_JobGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).JobGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_JobGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).JobGet(ctx, req.(*JobGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_JobSetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSetSpec_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).JobSetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_JobSetSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).JobSetSpec(ctx, req.(*JobSetSpec_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_JobEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobEnable_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).JobEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_JobEnable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).JobEnable(ctx, req.(*JobEnable_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_JobDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDisable_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).JobDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_JobDisable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).JobDisable(ctx, req.(*JobDisable_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_JobPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobPut_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).JobPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_JobPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).JobPut(ctx, req.(*JobPut_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_JobDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDelete_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).JobDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_JobDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).JobDelete(ctx, req.(*JobDelete_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_ServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).ServiceList(ctx, req.(*ServiceList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_ServicePut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicePut_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).ServicePut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_ServicePut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).ServicePut(ctx, req.(*ServicePut_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_ServiceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).ServiceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_ServiceGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).ServiceGet(ctx, req.(*ServiceGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KKSchedule_ServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDelete_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KKScheduleServer).ServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KKSchedule_ServiceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KKScheduleServer).ServiceDelete(ctx, req.(*ServiceDelete_Input))
	}
	return interceptor(ctx, in, info, handler)
}

// KKSchedule_ServiceDesc is the grpc.ServiceDesc for KKSchedule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KKSchedule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kk_schedule.KKSchedule",
	HandlerType: (*KKScheduleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobList",
			Handler:    _KKSchedule_JobList_Handler,
		},
		{
			MethodName: "JobGet",
			Handler:    _KKSchedule_JobGet_Handler,
		},
		{
			MethodName: "JobSetSpec",
			Handler:    _KKSchedule_JobSetSpec_Handler,
		},
		{
			MethodName: "JobEnable",
			Handler:    _KKSchedule_JobEnable_Handler,
		},
		{
			MethodName: "JobDisable",
			Handler:    _KKSchedule_JobDisable_Handler,
		},
		{
			MethodName: "JobPut",
			Handler:    _KKSchedule_JobPut_Handler,
		},
		{
			MethodName: "JobDelete",
			Handler:    _KKSchedule_JobDelete_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _KKSchedule_ServiceList_Handler,
		},
		{
			MethodName: "ServicePut",
			Handler:    _KKSchedule_ServicePut_Handler,
		},
		{
			MethodName: "ServiceGet",
			Handler:    _KKSchedule_ServiceGet_Handler,
		},
		{
			MethodName: "ServiceDelete",
			Handler:    _KKSchedule_ServiceDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kk_schedule/service.proto",
}
